//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.8-b130911.1802 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2016.04.01 at 06:02:17 PM EEST 
//


package oasis.names.tc.emergency.edxl.tep._1;

import javax.xml.bind.annotation.XmlEnum;
import javax.xml.bind.annotation.XmlEnumValue;
import javax.xml.bind.annotation.XmlType;


/**
 * <p>Java class for ContingencyMedicalSpecialtyCodeDefaultValues.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * <p>
 * <pre>
 * &lt;simpleType name="ContingencyMedicalSpecialtyCodeDefaultValues">
 *   &lt;restriction base="{urn:oasis:names:tc:emergency:edxl:ct:1.0}EDXLStringType">
 *     &lt;enumeration value="Pediatric"/>
 *     &lt;enumeration value="Burn"/>
 *     &lt;enumeration value="Psychiatric"/>
 *     &lt;enumeration value="MedicalSurge"/>
 *     &lt;enumeration value="CriticalCare"/>
 *   &lt;/restriction>
 * &lt;/simpleType>
 * </pre>
 * 
 */
@XmlType(name = "ContingencyMedicalSpecialtyCodeDefaultValues")
@XmlEnum
public enum ContingencyMedicalSpecialtyCodeDefaultValues {

    @XmlEnumValue("Pediatric")
    PEDIATRIC("Pediatric"),
    @XmlEnumValue("Burn")
    BURN("Burn"),
    @XmlEnumValue("Psychiatric")
    PSYCHIATRIC("Psychiatric"),
    @XmlEnumValue("MedicalSurge")
    MEDICAL_SURGE("MedicalSurge"),
    @XmlEnumValue("CriticalCare")
    CRITICAL_CARE("CriticalCare");
    private final String value;

    ContingencyMedicalSpecialtyCodeDefaultValues(String v) {
        value = v;
    }

    public String value() {
        return value;
    }

    public static ContingencyMedicalSpecialtyCodeDefaultValues fromValue(String v) {
        for (ContingencyMedicalSpecialtyCodeDefaultValues c: ContingencyMedicalSpecialtyCodeDefaultValues.values()) {
            if (c.value.equals(v)) {
                return c;
            }
        }
        throw new IllegalArgumentException(v);
    }

}
